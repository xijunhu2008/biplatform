<?php
/**
 * db操作逻辑
 *
 * @author fefeding
 * @date 2014-11-10
 */
class Database_model extends CI_Model
{
	/**
	 * 查询数据库
	 * @param {string} $sql 查询sql语句(例如:SELECT * FROM some_table WHERE id = ? AND status = ? AND author = ?)
	 * @param {array} $pars 查询参数，对应的是sql中的? 例如： array(3, 'live', 'Rick')
	 * @param {database} [$db] 操作的DB。默认为$this->db
	 * @return {query} 查询指针
	 */
	public function query($sql, $pars = null, $db = null) {
		//如果指定的是一个字符串，则表示用指定配置初始化连接
		if(gettype($db) == 'string') $db = $this->load->database($db, TRUE);
		if(!$db) $db = $this->db;//默认指向默认的DB

		$qry = $db->query($sql,$pars);
		return $qry;
	}

	/**
	 * 查询数据库
	 * @param {string} $sql 查询sql语句(例如:SELECT * FROM some_table WHERE id = ? AND status = ? AND author = ?)
	 * @param {array} $pars 查询参数，对应的是sql中的? 例如： array(3, 'live', 'Rick')
	 * @param {database} [$db] 操作的DB。默认为$this->db
	 * @return {array} 数组结果集
	 */
	public function select($sql, $pars = null, $db = null) {
		$qry = $this->query($sql, $pars, $db);
		$data = $qry->result_array();
		//$qry->free_result();//释放资源
		return $data;
	}

	/**
	 * 查询数据库
	 * @param {string} $sql 查询sql语句(例如:SELECT * FROM some_table WHERE id = ? AND status = ? AND author = ?)
	 * @param {array} $pars 查询参数，对应的是sql中的? 例如： array(3, 'live', 'Rick')
	 * @param {database} [$db] 操作的DB。默认为$this->db
	 * @return {array} 结果集,对象的结果集
	 */
	public function select_result($sql, $pars = null, $db = null) {
		$qry = $this->query($sql, $pars, $db);
		$data = $qry->result();
		//$qry->free_result();//释放资源
		return $data;
	}

	/**
	 * 查询单行
	 * @param {string} $sql 查询sql语句(例如:SELECT * FROM some_table WHERE id = ? AND status = ? AND author = ?)
	 * @param {array} $pars 查询参数，对应的是sql中的? 例如： array(3, 'live', 'Rick')
	 * @param {database} [$db] 操作的DB。默认为$this->db
	 * @return {array} 结果集,对象的结果集
	 */
	public function select_row($sql, $pars = null, $db = null) {
		$qry = $this->query($sql, $pars, $db);
		if($qry->num_rows() > 0) {
			$row = $qry->row_array(); 
			return $row;
		}
		return null;
	}

	/**
	 * 获取符合条件的数据行数
	 * @param {string} $sql 查询sql语句(例如:SELECT * FROM some_table WHERE id = ? AND status = ? AND author = ?)
	 * @param {array} $pars 查询参数，对应的是sql中的? 例如： array(3, 'live', 'Rick')
	 * @param {database} [$db] 操作的DB。默认为$this->db
	 * @return {int} 行数
	 */
	public function count($sql, $pars, $db = null) {
		$qry = $this->query($sql, $pars, $db);
		return $qry->num_rows();
	}

	/**
	 * 分页查询
	 * @param {string} $sql 查询sql语句(例如:SELECT * FROM some_table WHERE id = ? AND status = ? AND author = ?)
	 * @param {array} $pars 查询参数，对应的是sql中的? 例如： array(3, 'live', 'Rick')
	 * @param {int} $page 请求的页码
	 * @param {int} $count 每页显示多少行
	 * @param {database} [$db] 操作的DB。默认为$this->db
	 * @return {array} 结果集,包含总条数，符合条件行数
	 *
	 */
	public function page($sql, $pars, $page, $count, $db = null) {
		$qry = $this->query($sql, $pars, $db);
		$total = $qry->num_rows();// 符合条件的行数
		//$qry->free_result();//释放资源
		if(gettype($page) == 'string') $page = intval($page);
		//前端是从1开始的，这里要减1
		$page -= 1;
		//计算分页变量
		$pageCount = ceil($total / $count);//获取总页数
		if($page >= $pageCount) $page = $pageCount - 1;//如果请求的页码大于最大页码，则取最后一页
		if($pageCount == 0) $page = 0;
		$start = $page * $count;//起始索引

		//分页查
		$sql .= " limit $start,$count";

		$qry = $this->query($sql, $pars, $db);		
		$data = $qry->result_array();
		//$qry->free_result();//释放资源
		return array("data"=>$data, "page"=>$page, "pageCount"=>$pageCount, "total"=>$total);
	}

	/**
	 * 插入表数据
	 * @param {string} $table 表名
	 * @param {array} $fields 插入的表字段 {"a"=>"?","b"=>"?"}
	 * @param {array} $pars 查询参数，对应的是sql中的? 例如： array(3, 'live', 'Rick')
	 * @param {bool} $hasId 是否返回新增的ID
	 * @param {database} [$db] 操作的DB。默认为$this->db
	 *
	 */
	public function insert($table, $fields, $pars = null, $hasId = false, $db=null) {

		//如果指定的是一个字符串，则表示用指定配置初始化连接
		if(gettype($db) == 'string') $db = $this->load->database($db, TRUE);
		if(!$db) $db = $this->db;//默认指向默认的DB

		//生成insert语句
		$sql = $db->insert_string($table, $fields);
		
		$qry = $this->query($sql, $pars, $db);
		//如果需要返回生成的id,则用insert_id
		if($hasId) {
			$r = $db->insert_id();
		}
		else {
			//返回影响的行数 
			$r = $db->affected_rows();
		}
		//$qry->free_result();//释放资源

		//写操作日志
		$desc = '';
		if($pars) {
			$desc = json_encode($pars);
		}
		$this->logger->write($table,$r,'insert',$desc, $sql);

		return $r;
	}

	/**
	 * 更新表数据
	 * @param {string} $table 表名
	 * @param {array} $data 更新的数据array('name' => $name, 'email' => $email, 'url' => $url);
	 * @param {array} $where 更新的数据条件 "id=? and cid=?"
	 * @param {array} $pars 查询参数，对应的是sql中的? 例如： array(3, 'live', 'Rick')
	 * @param {database} [$db] 操作的DB。默认为$this->db
	 *
	 */
	public function update($table, $data, $where, $pars = null, $db=null) {
		//如果指定的是一个字符串，则表示用指定配置初始化连接
		if(gettype($db) == 'string') $db = $this->load->database($db, TRUE);
		if(!$db) $db = $this->db;//默认指向默认的DB
		//生成update语句
		$sql = $db->update_string($table, $data, $where);
		$qry = $this->query($sql, $pars, $db);
		
		//返回影响的行数 
		$r = $db->affected_rows();	
		//$qry->free_result();//释放资源	

		$desc = '';
		if($pars) {
			$desc = json_encode($pars);
		}
		$id = $r;
		if($pars && isset($pars['id'])) {
			$id = $pars['id'];
		}
		//写操作日志
		$this->logger->write($table,$id,'update',$desc, $sql);

		return $r;
	}

	/**
	 * 删除表数据
	 * @param {string} $sql 删除语句
	 * @param {array} $pars 查询参数，对应的是sql中的? 例如： array(3, 'live', 'Rick')
	 * @param {database} [$db] 操作的DB。默认为$this->db
	 *
	 */
	public function delete($sql, $pars = null, $db=null) {
		//如果指定的是一个字符串，则表示用指定配置初始化连接
		if(gettype($db) == 'string') $db = $this->load->database($db, TRUE);
		if(!$db) $db = $this->db;//默认指向默认的DB

		$qry = $this->query($sql, $pars, $db);
		
		//返回影响的行数 
		$r = $db->affected_rows();	
		
		$desc = '';
		if($pars) {
			$desc = json_encode($pars);
		}
		$id = $r;
		if($pars && isset($pars['id'])) {
			$id = $pars['id'];
		}
		//写操作日志
		$this->logger->write('',$id,'delete',$desc, $sql);

		return $r;
	}
}
?>